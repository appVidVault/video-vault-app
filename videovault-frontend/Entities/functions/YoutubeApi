import { createClient } from 'npm:@base44/sdk@0.1.0';


const base44 = createClient({
    appId: Deno.env.get('BASE44_APP_ID'), 
});

const YOUTUBE_API_KEY = Deno.env.get('YOUTUBE_API_KEY');
const YOUTUBE_API_BASE_URL = 'https://www.googleapis.com/youtube/v3';

Deno.serve(async (req) => {
    try {
        const authHeader = req.headers.get('Authorization');
        if (!authHeader) {
            return new Response('Unauthorized', { status: 401 });
        }
        const token = authHeader.split(' ')[1];
        base44.auth.setToken(token);

        if (req.method !== 'POST') {
            return new Response('Method not allowed', { status: 405 });
        }
        
        const body = await req.json();
        
        // Handle both formats of requests - direct properties or nested in action/params
        const searchTerm = body.searchTerm || (body.params?.searchTerm) || '';
        const videoId = body.videoId || (body.params?.videoId) || '';
        const maxResults = body.maxResults || (body.params?.maxResults) || 10;
        const pageToken = body.pageToken || (body.params?.pageToken) || '';
        
        if (searchTerm) {
            return await handleSearch(searchTerm, maxResults, pageToken);
        } else if (videoId) {
            return await handleVideoDetails(videoId);
        } else {
            return new Response(JSON.stringify({ error: 'Missing required parameters' }), { 
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }
    } catch (error) {
        console.error('YouTube API error:', error);
        return new Response(JSON.stringify({ error: error.message || 'Internal server error' }), { 
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
});

async function handleSearch(query, maxResults = 12, pageToken = '') {
    if (!query) {
        return new Response(JSON.stringify({ error: 'Query parameter is required' }), { 
            status: 400,
            headers: { "Content-Type": "application/json" }
        });
    }
    
    let url = new URL(`${YOUTUBE_API_BASE_URL}/search`);
    url.searchParams.append('key', YOUTUBE_API_KEY);
    url.searchParams.append('part', 'snippet');
    url.searchParams.append('type', 'video');
    url.searchParams.append('q', query);
    url.searchParams.append('maxResults', maxResults.toString());
    url.searchParams.append('videoEmbeddable', 'true');
    
    if (pageToken) {
        url.searchParams.append('pageToken', pageToken);
    }
    
    try {
        const response = await fetch(url);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error?.message || `YouTube API search request failed with status ${response.status}`);
        }
        
        return new Response(JSON.stringify(data), {
            headers: { 'Content-Type': 'application/json' }
        });
    } catch (error) {
        console.error("YouTube API search error:", error);
        return new Response(JSON.stringify({ error: error.message }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}

async function handleVideoDetails(videoId) {
    if (!videoId) {
        return new Response(JSON.stringify({ error: 'Video ID is required' }), {
            status: 400,
            headers: { "Content-Type": "application/json" }
        });
    }
    
    let url = new URL(`${YOUTUBE_API_BASE_URL}/videos`);
    url.searchParams.append('key', YOUTUBE_API_KEY);
    url.searchParams.append('part', 'snippet,contentDetails');
    url.searchParams.append('id', videoId);
    
    try {
        const response = await fetch(url);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error?.message || `YouTube API video details request failed with status ${response.status}`);
        }
        
        return new Response(JSON.stringify(data), {
            headers: { 'Content-Type': 'application/json' }
        });
    } catch (error) {
        console.error("YouTube API video details error:", error);
        return new Response(JSON.stringify({ error: error.message }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}
