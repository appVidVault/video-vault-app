
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Palette, Check } from 'lucide-react'; // Removed Lock icon
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { useToast } from "@/components/ui/use-toast";
import { User } from '@/entities/User';
import { UserSettings } from '@/entities/UserSettings';
import { useTranslation } from "../components/LanguageProvider";
import { Input } from "@/components/ui/input"; // Kept for general use, though PIN-specific use removed
import { Label } from "@/components/ui/label"; // Kept for general use, though PIN-specific use removed
import { VideoIdCache } from "@/components/VideoIdCache";

export default function Settings() {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [selectedTheme, setSelectedTheme] = useState('default');
  const [userSettingsId, setUserSettingsId] = useState(null);
  const [loading, setLoading] = useState(true);
  
  // REMOVED all PIN-related state variables (parentalPin, confirmPin, pinError)
  
  // Define theme preview styles
  const themes = [
    { name: t.theme_default || 'Default', value: 'default', style: { background: 'linear-gradient(to right, #f8fafc, #e2e8f0)', border: '1px solid #cbd5e1', color: '#0f172a' } },
    { name: t.theme_dark || 'Dark', value: 'dark', style: { background: 'linear-gradient(to right, #2563eb, #1e40af)', border: '1px solid #60a5fa', color: '#ffffff' } },
    { name: t.theme_blue || 'Blue', value: 'blue', style: { background: 'linear-gradient(to right, #e0f2fe, #bae6fd)', border: '1px solid #0ea5e9', color: '#0c4a6e' } },
    { name: t.theme_green || 'Green', value: 'green', style: { background: 'linear-gradient(to right, #d1fae5, #a7f3d0)', border: '1px solid #34d399', color: '#14532d' } },
    { name: t.theme_purple || 'Purple', value: 'purple', style: { background: 'linear-gradient(to right, #f3e8ff, #e9d5ff)', border: '1px solid #a855f7', color: '#4c1d95' } },
    { name: t.theme_warm || 'Warm', value: 'warm', style: { background: 'linear-gradient(to right, #fff7ed, #ffedd5)', border: '1px solid #f97316', color: '#7c2d12' } },
    { name: t.theme_cool || 'Cool', value: 'cool', style: { background: 'linear-gradient(to right, #ecfeff, #cffafe)', border: '1px solid #06b6d4', color: '#134e4a' } }
  ];
  
  useEffect(() => {
    loadUserSettings();
    // REMOVED PIN loading logic
  }, []);

  const loadUserSettings = async () => {
    setLoading(true);
    try {
      const user = await User.me();
      if (user) {
        const settings = await UserSettings.filter({ created_by: user.email });
        if (settings && settings.length > 0) {
          const loadedSettings = settings[0];
          setUserSettingsId(loadedSettings.id);
          
          const themeToApply = loadedSettings.theme || 'default';
          setSelectedTheme(themeToApply);

          if (window.applyTheme) {
            window.applyTheme(themeToApply);
          }
        } else {
          if (window.applyTheme) window.applyTheme('default');
        }
      } else {
        if (window.applyTheme) window.applyTheme('default');
      }
    } catch (error) {
      console.error("Error loading user settings:", error);
      if (window.applyTheme) window.applyTheme('default');
    } finally {
      setLoading(false);
    }
  };
  
  const saveTheme = async (theme) => {
    try {
      setSelectedTheme(theme);
      
      if (window.applyTheme) {
        window.applyTheme(theme);
      } else {
        console.warn("Global applyTheme function not found!");
      }
      
      const user = await User.me();
      if (!user) {
        toast({ title: t.not_signed_in || "Not signed in", description: t.sign_in_to_save || "Please sign in to save settings", variant: "destructive" });
        return;
      }
      
      if (userSettingsId) {
        await UserSettings.update(userSettingsId, { theme });
      } else {
        const newSettings = await UserSettings.create({ theme });
        setUserSettingsId(newSettings.id);
      }
      
      toast({ title: t.theme_applied || "Theme applied", description: `${t.theme_set_to || "Theme set to"} ${theme}` });
    } catch (error) {
      console.error("Error saving theme:", error);
      toast({ title: t.error || "Error", description: t.could_not_save_theme || "Could not save theme settings", variant: "destructive" });
    }
  };
  
  // REMOVED: saveParentalPin function

  const handleCleanupVideoCache = () => {
    VideoIdCache.clearCache();
    toast({
      title: t.cache_cleared || "Cache Cleared",
      description: t.cache_cleared_desc || "Video ID cache has been cleared.",
    });
  };

  return (
    <div className="container mx-auto p-4 md:p-6">
      <div className="flex items-center gap-3 mb-6">
        <Link to={createPageUrl("Home")} aria-label={t.back_to_home || "Back to Home"}>
          <Button variant="ghost" size="icon" className="rounded-full">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="text-2xl md:text-3xl font-bold">{t.settings || "Settings"}</h1>
      </div>

      <Tabs defaultValue="themes" className="space-y-6">
        <TabsList className="grid w-full grid-cols-1 sm:grid-cols-2 gap-2 mb-6 bg-transparent h-auto p-0">
          <TabsTrigger 
            value="themes" 
            className="flex items-center gap-2 border border-black bg-white text-black hover:bg-gray-100/50 data-[state=active]:bg-white data-[state=active]:text-black data-[state=active]:border-2 rounded-md px-3 py-2 transition-colors"
          >
            <Palette className="h-4 w-4" /> {t.theme_settings || "Themes"}
          </TabsTrigger>
          {/* REMOVED Parental tab trigger */}
          <TabsTrigger 
            value="maintenance"
            className="border border-black bg-white text-black hover:bg-gray-100/50 data-[state=active]:bg-white data-[state=active]:text-black data-[state=active]:border-2 rounded-md px-3 py-2 transition-colors"
          >
            {t.maintenance || "Maintenance"}
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="themes">
          <Card>
            <CardHeader>
              <CardTitle>{t.theme_settings || "Theme Settings"}</CardTitle>
              <CardDescription>{t.choose_your_theme || "Choose your preferred color scheme"}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {themes.map((theme) => (
                  <div 
                    key={theme.value} 
                    className={`flex flex-col items-center border rounded-lg p-4 hover:border-blue-500 cursor-pointer transition-all ${selectedTheme === theme.value ? 'ring-2 ring-blue-500' : ''}`}
                    onClick={() => saveTheme(theme.value)}
                  >
                    <div 
                      className="w-full h-16 rounded mb-3 transition-transform hover:scale-105 relative overflow-hidden" 
                      style={theme.style}
                    >
                      {selectedTheme === theme.value && (
                        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-20 rounded">
                          <Check className="h-6 w-6" />
                        </div>
                      )}
                    </div>
                    <span className="capitalize text-gray-900">{theme.name}</span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        {/* REMOVED: Parental tab completely */}

        <TabsContent value="maintenance">
          <Card>
            <CardHeader>
              <CardTitle>{t.maintenance_title || "Maintenance"}</CardTitle>
              <CardDescription>
                {t.maintenance_desc || "Troubleshooting and maintenance tools"}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium">{t.cache_management || "Cache Management"}</h3>
                  <div className="mt-2 space-y-4">
                    <div className="flex flex-col gap-2">
                      <Label>{t.cleanup_cache_label || "Clean up Cache"}</Label>
                      <div className="flex justify-between items-center">
                        <div className="text-sm text-gray-500">
                          {t.cleanup_cache_desc || "Clear the invalid video IDs cache to recheck all references"}
                        </div>
                        <Button onClick={handleCleanupVideoCache} variant="outline">
                          {t.clear_cache || "Clear Cache"}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
